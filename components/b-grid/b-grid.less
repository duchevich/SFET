.b-grid {
  .make-row();

  &.m-inlineBlocks {
    font-size: 0;
    line-height: 0;
    > .b-grid-col {
      float: none !important;
      display: inline-block;
      vertical-align: top;
    }
  }
  &.m-inlineBlocks-middle {
    vertical-align: middle;
  }
  &.m-gutter-false {
    > .b-grid-col {
      padding: 0 !important;
    }
  }

  &-col {
    position: relative;
    min-height: 1px;
    width: 100%;
    float: left;
    padding-left:  (@g-grid-gutter / 2);
    padding-right: (@g-grid-gutter / 2);
  }
}

// --- Grid Framework (Based on Bootstrap 3.3.7)

// Creates a wrapper for a series of columns
.make-row(@gutter: @g-grid-gutter) {
  margin-left:  ceil((@gutter / -2));
  margin-right: floor((@gutter / -2));
  &:before,
  &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Generating Columns
.make-grid(xs);
@media (min-width: @g-scr-sm-min) {
  .make-grid(sm);
}
@media (min-width: @g-scr-md-min) {
  .make-grid(md);
}
@media (min-width: @g-scr-lg-min) {
  .make-grid(lg);
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @g-grid-gutter) {
  width: percentage((@columns / @g-grid-cols));
}
.make-xs-column-offset(@columns) {
  margin-left: percentage((@columns / @g-grid-cols));
}
.make-xs-column-push(@columns) {
  left: percentage((@columns / @g-grid-cols));
}
.make-xs-column-pull(@columns) {
  right: percentage((@columns / @g-grid-cols));
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @g-grid-gutter) {
  @media (min-width: @g-scr-sm-min) {
    width: percentage((@columns / @g-grid-cols));
  }
}
.make-sm-column-offset(@columns) {
  @media (min-width: @g-scr-sm-min) {
    margin-left: percentage((@columns / @g-grid-cols));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @g-scr-sm-min) {
    left: percentage((@columns / @g-grid-cols));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @g-scr-sm-min) {
    right: percentage((@columns / @g-grid-cols));
  }
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @g-grid-gutter) {
  @media (min-width: @g-scr-md-min) {
    width: percentage((@columns / @g-grid-cols));
  }
}
.make-md-column-offset(@columns) {
  @media (min-width: @g-scr-md-min) {
    margin-left: percentage((@columns / @g-grid-cols));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @g-scr-md-min) {
    left: percentage((@columns / @g-grid-cols));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @g-scr-md-min) {
    right: percentage((@columns / @g-grid-cols));
  }
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @g-grid-gutter) {
  @media (min-width: @g-scr-lg-min) {
    width: percentage((@columns / @g-grid-cols));
  }
}
.make-lg-column-offset(@columns) {
  @media (min-width: @g-scr-lg-min) {
    margin-left: percentage((@columns / @g-grid-cols));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @g-scr-lg-min) {
    left: percentage((@columns / @g-grid-cols));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @g-scr-lg-min) {
    right: percentage((@columns / @g-grid-cols));
  }
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .b-grid-col.m-@{class}-@{index} {
    width: percentage((@index / @g-grid-cols));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .b-grid-col.m-@{class}-push-@{index} {
    left: percentage((@index / @g-grid-cols));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .b-grid-col.m-@{class}-push-0 {
    left: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .b-grid-col.m-@{class}-pull-@{index} {
    right: percentage((@index / @g-grid-cols));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .b-grid-col.m-@{class}-pull-0 {
    right: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .b-grid-col.m-@{class}-offset-@{index} {
    margin-left: percentage((@index / @g-grid-cols));
  }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
  .loop-grid-columns(@g-grid-cols, @class, width);
  .loop-grid-columns(@g-grid-cols, @class, pull);
  .loop-grid-columns(@g-grid-cols, @class, push);
  .loop-grid-columns(@g-grid-cols, @class, offset);
}